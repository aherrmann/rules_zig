name: CI

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [opened, reopened, synchronize, edited]

  # Allows you to call this workflow from another workflow
  workflow_call:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

concurrency:
  # Cancel previous actions from the same PR: https://stackoverflow.com/a/72408109
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # matrix-prep-* steps generate JSON used to create a dynamic actions matrix.
  # Insanely complex for how simple this requirement is inspired from
  # https://stackoverflow.com/questions/65384420/how-to-make-a-github-action-matrix-element-conditional

  matrix-prep-bazelversion:
    # Prepares the 'bazelversion' axis of the test matrix
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - id: versions_from_bazel_versions_bzl
        run: echo "bazelversions=$(.github/workflows/bazel_versions.py)" >> $GITHUB_OUTPUT
    outputs:
      # Will look like ["<version from .bazelversion>","<version from bazel_versions.bzl>"]
      bazelversions: ${{ steps.versions_from_bazel_versions_bzl.outputs.bazelversions }}

  test:
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}

    needs:
      - matrix-prep-bazelversion

    # Run bazel test in each workspace with each version of Bazel supported
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        bazelVersion: ${{ fromJSON(needs.matrix-prep-bazelversion.outputs.bazelversions) }}
        zigVersion: [0.12.0]
        bzlmodEnabled: [true, false]
        folder:
          - "."
          - "e2e/workspace"
        targetPattern: ["//..."]
        include:
          # The integration tests iterate over all supported Bazel versions, so
          # we only run them against the latest Bazel version.
          - os: ubuntu-latest
            bazelVersion: ${{ fromJSON(needs.matrix-prep-bazelversion.outputs.bazelversions)[0] }}
            zigVersion: 0.12.0
            bzlmodEnabled: false
            folder: "."
            targetPattern: "//zig/tests/integration_tests"
          - os: ubuntu-latest
            bazelVersion: ${{ fromJSON(needs.matrix-prep-bazelversion.outputs.bazelversions)[0] }}
            zigVersion: 0.12.0
            bzlmodEnabled: true
            folder: "."
            targetPattern: "//zig/tests/integration_tests"
          - os: macos-latest
            bazelVersion: ${{ fromJSON(needs.matrix-prep-bazelversion.outputs.bazelversions)[0] }}
            zigVersion: 0.12.0
            bzlmodEnabled: true
            folder: "."
            targetPattern: "//zig/tests/integration_tests"
          # Only test older Zig versions with the latest Bazel version
          - os: ubuntu-latest
            bazelVersion: ${{ fromJSON(needs.matrix-prep-bazelversion.outputs.bazelversions)[0] }}
            zigVersion: 0.11.0
            bzlmodEnabled: false
            folder: "."
            targetPattern: "//..."
          - os: ubuntu-latest
            bazelVersion: ${{ fromJSON(needs.matrix-prep-bazelversion.outputs.bazelversions)[0] }}
            zigVersion: 0.11.0
            bzlmodEnabled: true
            folder: "."
            targetPattern: "//..."
          - os: macos-latest
            bazelVersion: ${{ fromJSON(needs.matrix-prep-bazelversion.outputs.bazelversions)[0] }}
            zigVersion: 0.11.0
            bzlmodEnabled: true
            folder: "."
            targetPattern: "//..."
          - os: ubuntu-latest
            bazelVersion: ${{ fromJSON(needs.matrix-prep-bazelversion.outputs.bazelversions)[0] }}
            zigVersion: 0.11.0
            bzlmodEnabled: false
            folder: "e2e/workspace"
            targetPattern: "//..."
          - os: ubuntu-latest
            bazelVersion: ${{ fromJSON(needs.matrix-prep-bazelversion.outputs.bazelversions)[0] }}
            zigVersion: 0.11.0
            bzlmodEnabled: true
            folder: "e2e/workspace"
            targetPattern: "//..."
          - os: macos-latest
            bazelVersion: ${{ fromJSON(needs.matrix-prep-bazelversion.outputs.bazelversions)[0] }}
            zigVersion: 0.11.0
            bzlmodEnabled: true
            folder: "e2e/workspace"
            targetPattern: "//..."
          # Only test the latest Bazel version on MacOS (MacOS runners are expensive and slow)
          - os: macos-latest
            bazelVersion: ${{ fromJSON(needs.matrix-prep-bazelversion.outputs.bazelversions)[0] }}
            zigVersion: 0.12.0
            bzlmodEnabled: false
            folder: "."
            targetPattern: "//..."
          - os: macos-latest
            bazelVersion: ${{ fromJSON(needs.matrix-prep-bazelversion.outputs.bazelversions)[0] }}
            zigVersion: 0.12.0
            bzlmodEnabled: true
            folder: "."
            targetPattern: "//..."
          - os: macos-latest
            bazelVersion: ${{ fromJSON(needs.matrix-prep-bazelversion.outputs.bazelversions)[0] }}
            zigVersion: 0.12.0
            bzlmodEnabled: false
            folder: "e2e/workspace"
            targetPattern: "//..."
          - os: macos-latest
            bazelVersion: ${{ fromJSON(needs.matrix-prep-bazelversion.outputs.bazelversions)[0] }}
            zigVersion: 0.12.0
            bzlmodEnabled: true
            folder: "e2e/workspace"
            targetPattern: "//..."

    # Configure a human readable name for each job
    name: Test ${{ matrix.targetPattern }} in ${{ matrix.folder }} with Zig ${{ matrix.zigVersion }}, Bazel ${{ matrix.bazelVersion }}, and bzlmod ${{ matrix.bzlmodEnabled }} on ${{ matrix.os }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      - uses: ./.github/actions/test
        with:
          os: ${{ matrix.os }}
          folder: ${{ matrix.folder }}
          bazelVersion: ${{ matrix.bazelVersion }}
          bzlmodEnabled: ${{ matrix.bzlmodEnabled }}
          # Disable documentation generation for all but the first Bazel
          # version, by setting --no@rules_zig//docs:build_docs in
          # .bazelrc.user. The generated documentation can vary between Bazel
          # versions. For example, Bazel version 7 changed the documentation of
          # the implicit `repo_mapping` parameter to repository rules compared
          # to Bazel version 6.
          docsEnabled: ${{ matrix.bazelVersion == fromJSON(needs.matrix-prep-bazelversion.outputs.bazelversions)[0] }}
          zigVersion: ${{ matrix.zigVersion }}
          targetPattern: ${{ matrix.targetPattern }}

  all_tests:
    runs-on: ubuntu-latest
    needs:
      - matrix-prep-bazelversion
      - test
    if: ${{ always() }}
    steps:
      - uses: cgrindel/gha_join_jobs@v1.2.0
        # Skip on release flows when invoked through the release workflow.
        # Otherwise gha_join_jobs discovers its own job in the job list and
        # fails since it is not yet succeeded, but still in progress.
        if: github.event_name != 'push' || !startsWith(github.ref, 'refs/tags/v')
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
