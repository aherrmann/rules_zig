name: Run Tests
description: Run all tests for a specific configuration.
inputs:
  os:
    description: "The runner's operating system, used in cache keys."
    required: true
  folder:
    description: "The folder to run builds and tests in."
    required: true
  bazelVersion:
    description: "The Bazel version to run the build and tests with."
    required: true
  bzlmodEnabled:
    description: "Whether to use bzlmod or the legacy WORKSPACE mode."
    required: true
  docsEnabled:
    description: "Whether to build Stardoc documentation."
    required: true
  zigVersion:
    description: "The default Zig version to use."
    required: true
  targetPattern:
    description: "The Bazel build and test target pattern."
    required: true
  tagFilters:
    description: "The Bazel build and test tag filters."
    required: true
  remoteEnabled:
    description: "Whether to enable remote execution."
    default: true
    required: false
  buildbuddyApiKey:
    description: "The API key for BuildBuddy remote cache and execution."
    required: true
  bazelFlags:
    description: "Additional flags to pass to Bazel."
    required: false
runs:
  using: composite
  steps:
    # Cache build and external artifacts so that the next ci build is incremental.
    # Because github action caches cannot be updated after a build, we need to
    # store the contents of each build in a unique cache key, then fall back to loading
    # it on the next ci run. We use hashFiles(...) in the key and restore-keys- with
    # the prefix to load the most recent cache for the branch on a cache miss. You
    # should customize the contents of hashFiles to capture any bazel input sources,
    # although this doesn't need to be perfect. If none of the input sources change
    # then a cache hit will load an existing cache and bazel won't have to do any work.
    # In the case of a cache miss, you want the fallback cache to contain most of the
    # previously built artifacts to minimize build time. The more precise you are with
    # hashFiles sources the less work bazel will have to do.
    - name: Mount bazel caches
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/bazel
          ~/.cache/bazel-repo
        key: bazel-cache-${{ inputs.os }}-${{ inputs.zigVersion }}-${{ inputs.bazelVersion }}-${{ inputs.bzlmodEnabled }}-${{ inputs.folder }}-${{ inputs.targetPattern }}-${{ inputs.tagFilters }}-${{ hashFiles('**/BUILD.bazel', '**/*.bzl', '**/*.zig', 'WORKSPACE', 'WORKSPACE.bzlmod', 'MODULE.bazel') }}
        restore-keys: |
          bazel-cache-${{ inputs.os }}-${{ inputs.zigVersion }}-${{ inputs.bazelVersion }}-${{ inputs.bzlmodEnabled }}-${{ inputs.folder }}-${{ inputs.targetPattern }}

    - name: Configure remote cache and execution
      if: inputs.remoteEnabled
      working-directory: ${{ inputs.folder }}
      shell: bash
      env:
        BUILDBUDDY_API_KEY: ${{ inputs.buildbuddyApiKey }}
      run: |
        cat <<EOF >>.bazelrc.user
        build --build_metadata=ROLE=CI
        build --config=remote-bes --config=remote-cache --remote_header=x-buildbuddy-api-key=$BUILDBUDDY_API_KEY
        # Remote execution on non-Linux is only available for BuildBuddy Enterprise.
        build:linux --config=remote
        EOF
        cat <<EOF >>.bazelrc.ic.user
        build --build_metadata=ROLE=CI
        build --config=remote-bes --config=remote-cache --remote_header=x-buildbuddy-api-key=$BUILDBUDDY_API_KEY
        # Remote execution on non-Linux is only available for BuildBuddy Enterprise.
        build:linux --config=remote
        EOF

    - name: Configure Bazel version
      working-directory: ${{ inputs.folder }}
      shell: bash
      run: echo "USE_BAZEL_VERSION=${{ inputs.bazelVersion }}" > .bazeliskrc

    - name: Set bzlmod flag
      working-directory: ${{ inputs.folder }}
      # Set --enable_bzlmod if bzlmodEnabled is true, else --noenable_bzlmod and --enable_workspace.
      id: set_bzlmod_flag
      shell: bash
      run: |
        echo "common ${{ inputs.bzlmodEnabled == 'true' && '--enable_bzlmod' || '--noenable_bzlmod --enable_workspace' }}" >> .bazelrc.user
        echo "bzlmod_flag=${{ inputs.bzlmodEnabled == 'true' && '--enable_bzlmod' || '--noenable_bzlmod --enable_workspace' }}" >> $GITHUB_OUTPUT

    - name: Configure documentation generation
      if: inputs.folder == '.' && inputs.targetPattern == '//...'
      working-directory: ${{ inputs.folder }}
      shell: bash
      run: |
        PREFIX=${{ inputs.docsEnabled == 'true' && '--' || '--no' }}
        echo "common $PREFIX@rules_zig//docs:build_docs" >> .bazelrc.user

    - name: Configure Zig version
      working-directory: ${{ inputs.folder }}
      shell: bash
      run: echo "build --@zig_toolchains//:version=${{ inputs.zigVersion }}" >> .bazelrc.user

    - name: Test generated files
      if: inputs.folder == '.' && inputs.targetPattern == '//...'
      working-directory: ${{ inputs.folder }}
      shell: bash
      run: |
        # Bazelisk will download bazel to here, ensure it is cached between runs.
        export XDG_CACHE_HOME="$HOME/.cache/bazel-repo"
        bazel --bazelrc=$GITHUB_WORKSPACE/.github/workflows/ci.bazelrc --bazelrc=.bazelrc run //util:update
        [ -z "$(git status --porcelain=v1 2>/dev/null)" ] || {
          echo 'Update generated files using `bazel run //util:update`' >&2
          git --no-pager diff >&2
          exit 1
        }

    - name: bazel test ${{ inputs.targetPattern }}
      working-directory: ${{ inputs.folder }}
      shell: bash
      run: |
        # Bazelisk will download bazel to here, ensure it is cached between runs.
        export XDG_CACHE_HOME="$HOME/.cache/bazel-repo"
        bazel --bazelrc=$GITHUB_WORKSPACE/.github/workflows/ci.bazelrc --bazelrc=.bazelrc test ${{ inputs.targetPattern }} ${{ inputs.tagFilters != '' && format('--build_tag_filters={0} --test_tag_filters={0}', inputs.tagFilters) || '' }} ${{ inputs.bazelFlags }}
