load("@bazel_skylib//rules:build_test.bzl", "build_test")
load("@bazel_skylib//rules:diff_test.bzl", "diff_test")
load(
    "@rules_zig//zig:defs.bzl",
    "zig_binary",
    "zig_configure_binary",
    "zig_configure_test",
    "zig_test",
)
load(":defs.bzl", "empty_toolchain")

platform(
    name = "aarch64-linux",
    constraint_values = [
        "@platforms//os:linux",
        "@platforms//cpu:aarch64",
    ],
)

platform(
    name = "x86_64-windows",
    constraint_values = [
        "@platforms//os:windows",
        "@platforms//cpu:x86_64",
    ],
)

empty_toolchain(name = "empty_toolchain")

toolchain(
    name = "unconstrained_default_test_toolchain",
    toolchain = ":empty_toolchain",
    toolchain_type = "@bazel_tools//tools/test:default_test_toolchain_type",
)

zig_binary(
    name = "read_elf_arch",
    main = "read_elf_arch.zig",
)

zig_binary(
    name = "read_pe32_arch",
    main = "read_pe32_arch.zig",
)

# TODO[AH] Test target transition on zig_static_library.
#   Open question: how to extract the target platform from .a file?

# ----------------------------------------------------------
# zig_configure_binary

zig_binary(
    name = "binary",
    main = "main.zig",
    tags = ["manual"],
)

zig_configure_binary(
    name = "binary_aarch64-linux",
    actual = ":binary",
    tags = ["manual"],
    target = ":aarch64-linux",
)

zig_configure_binary(
    name = "binary_x86_64-windows",
    actual = ":binary",
    tags = ["manual"],
    target = ":x86_64-windows",
)

build_test(
    name = "binary_aarch64-linux_build_test",
    targets = [
        ":binary_aarch64-linux",
    ],
)

build_test(
    name = "binary_x86_64-windows_build_test",
    targets = [
        ":binary_x86_64-windows",
    ],
)

genrule(
    name = "binary_aarch64-linux_arch",
    srcs = [":binary_aarch64-linux"],
    outs = ["binary_aarch64-linux_arch.actual"],
    cmd = "$(execpath :read_elf_arch) $(SRCS) > $(OUTS)",
    tools = [":read_elf_arch"],
)

genrule(
    name = "binary_x86_64-windows_arch",
    srcs = [":binary_x86_64-windows"],
    outs = ["binary_x86_64-windows_arch.actual"],
    cmd = "$(execpath :read_pe32_arch) $(SRCS) > $(OUTS)",
    tools = [":read_pe32_arch"],
)

diff_test(
    name = "binary_aarch64-linux_arch_test",
    size = "small",
    file1 = ":binary_aarch64-linux_arch.expected",
    file2 = ":binary_aarch64-linux_arch.actual",
)

diff_test(
    name = "binary_x86_64-windows_arch_test",
    size = "small",
    file1 = ":binary_x86_64-windows_arch.expected",
    file2 = ":binary_x86_64-windows_arch.actual",
)

# ----------------------------------------------------------
# zig_configure_test

zig_test(
    name = "test",
    main = "main.zig",
    tags = ["manual"],
)

zig_configure_test(
    name = "test_aarch64-linux",
    actual = ":test",
    extra_toolchains = [":unconstrained_default_test_toolchain"],
    tags = ["manual"],
    target = ":aarch64-linux",
)

zig_configure_test(
    name = "test_x86_64-windows",
    actual = ":test",
    extra_toolchains = [":unconstrained_default_test_toolchain"],
    tags = ["manual"],
    target = ":x86_64-windows",
)

build_test(
    name = "test_aarch64-linux_build_test",
    targets = [
        ":test_aarch64-linux",
    ],
)

build_test(
    name = "test_x86_64-windows_build_test",
    targets = [
        ":test_x86_64-windows",
    ],
)

genrule(
    name = "test_aarch64-linux_arch",
    testonly = True,
    srcs = [":test_aarch64-linux"],
    outs = ["test_aarch64-linux_arch.actual"],
    cmd = "$(execpath :read_elf_arch) $(SRCS) > $(OUTS)",
    tools = [":read_elf_arch"],
)

genrule(
    name = "test_x86_64-windows_arch",
    testonly = True,
    srcs = [":test_x86_64-windows"],
    outs = ["test_x86_64-windows_arch.actual"],
    cmd = "$(execpath :read_pe32_arch) $(SRCS) > $(OUTS)",
    tools = [":read_pe32_arch"],
)

diff_test(
    name = "test_aarch64-linux_arch_test",
    size = "small",
    file1 = ":test_aarch64-linux_arch.expected",
    file2 = ":test_aarch64-linux_arch.actual",
)

diff_test(
    name = "test_x86_64-windows_arch_test",
    size = "small",
    file1 = ":test_x86_64-windows_arch.expected",
    file2 = ":test_x86_64-windows_arch.actual",
)
