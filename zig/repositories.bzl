"""Declare rules_zig dependencies and toolchains.

These are needed for local development, and users must install them as well.
See https://docs.bazel.build/versions/main/skylark/deploying.html#dependencies
"""

load("@bazel_tools//tools/build_defs/repo:http.bzl", __http_archive = "http_archive")
load("@bazel_tools//tools/build_defs/repo:utils.bzl", "maybe")
load("//zig/private:toolchains_repo.bzl", "PLATFORMS", "sanitize_version", "toolchains_repo")
load("//zig/private:versions.bzl", "TOOL_VERSIONS")
load(
    "//zig/private/common:zig_cache.bzl",
    "VAR_CACHE_PREFIX",
    "VAR_CACHE_PREFIX_LINUX",
    "VAR_CACHE_PREFIX_MACOS",
    "VAR_CACHE_PREFIX_WINDOWS",
    "env_zig_cache_prefix",
)

def _http_archive(name, **kwargs):
    maybe(__http_archive, name = name, **kwargs)

# WARNING: any changes in this function may be BREAKING CHANGES for users
# because we'll fetch a dependency which may be different from one that
# they were previously fetching later in their WORKSPACE setup, and now
# ours took precedence. Such breakages are challenging for users, so any
# changes in this function should be marked as BREAKING in the commit message
# and released only in semver majors.
# This is all fixed by bzlmod, so we just tolerate it for now.
def rules_zig_dependencies():
    """Register dependencies required by rules_zig."""

    _http_archive(
        name = "bazel_skylib",
        sha256 = "74d544d96f4a5bb630d465ca8bbcfe231e3594e5aae57e1edbf17a6eb3ca2506",
        urls = [
            "https://github.com/bazelbuild/bazel-skylib/releases/download/1.6.0/bazel-skylib-1.3.0.tar.gz",
            "https://mirror.bazel.build/github.com/bazelbuild/bazel-skylib/releases/download/1.3.0/bazel-skylib-1.3.0.tar.gz",
        ],
    )

    _http_archive(
        name = "aspect_bazel_lib",
        sha256 = "b554eb7942a5ab44c90077df6a0c76fc67c5874c9446a007e9ba68be82bd4796",
        strip_prefix = "bazel-lib-2.7.1",
        url = "https://github.com/aspect-build/bazel-lib/releases/download/v2.7.1/bazel-lib-v2.7.1.tar.gz",
    )

########
# Remaining content of the file is only used to support toolchains.
########
_DOC = "Fetch and install a Zig toolchain."
_ATTRS = {
    "zig_version": attr.string(mandatory = True, values = TOOL_VERSIONS.keys()),
    "platform": attr.string(mandatory = True, values = PLATFORMS.keys()),
}
_ENV = [
    VAR_CACHE_PREFIX,
    VAR_CACHE_PREFIX_LINUX,
    VAR_CACHE_PREFIX_MACOS,
    VAR_CACHE_PREFIX_WINDOWS,
]

def _zig_repository_impl(repository_ctx):
    url = TOOL_VERSIONS[repository_ctx.attr.zig_version][repository_ctx.attr.platform].url
    integrity = TOOL_VERSIONS[repository_ctx.attr.zig_version][repository_ctx.attr.platform].integrity
    basename = url.rsplit("/", 1)[1]
    if basename.endswith(".tar.gz") or basename.endswith(".tar.xz"):
        prefix = basename[:-7]
    elif basename.endswith(".zip"):
        prefix = basename[:-4]
    else:
        fail("Cannot download Zig SDK at {}. Unsupported file extension.".format(url))
    repository_ctx.download_and_extract(
        url = url,
        integrity = integrity,
        stripPrefix = prefix,
    )

    cache_prefix = env_zig_cache_prefix(repository_ctx.os.environ, repository_ctx.attr.platform)

    build_content = """#Generated by zig/repositories.bzl
load("@rules_zig//zig:toolchain.bzl", "zig_toolchain")
zig_toolchain(
    name = "zig_toolchain",
    zig_exe = select({{
        "@bazel_tools//src/conditions:host_windows": "zig.exe",
        "//conditions:default": "zig",
    }}),
    zig_lib = glob(["lib/**"]),
    zig_lib_path = "lib",
    zig_version = "{zig_version}",
    zig_cache = {zig_cache},
)
""".format(
        zig_version = repository_ctx.attr.zig_version,
        zig_cache = repr(cache_prefix),
    )

    # Base BUILD file for this repository
    repository_ctx.file("BUILD.bazel", build_content)

zig_repository = repository_rule(
    _zig_repository_impl,
    doc = _DOC,
    attrs = _ATTRS,
    environ = _ENV,
)

def zig_repositories(**kwargs):
    """Fetch and install a Zig toolchain.

    Args:
      **kwargs: forwarded to `zig_repository`.

    Deprecated:
      Use `zig_repository` instead.
    """
    zig_repository(**kwargs)

# Wrapper macro around everything above, this is the primary API
def zig_register_toolchains(*, name, zig_versions = None, zig_version = None, register = True, **kwargs):
    """Convenience macro for users which does typical setup.

    - create a repository for each version and built-in platform like
      "zig_0.10.1_linux_amd64" - this repository is lazily fetched when zig is
      needed for that version and platform.
    - TODO: create a convenience repository for the host platform like "zig_host"
    - create a repository exposing toolchains for each platform like "zig_platforms"
    - register a toolchain pointing at each platform

    Users can avoid this macro and do these steps themselves, if they want more control.

    Args:
        name: base name for all created repos, like "zig".
        zig_versions: The list of Zig SDK versions to fetch,
            toolchains are registered in the given order.
        zig_version: A single Zig SDK version to fetch.
            Do not use together with zig_versions.
        register: whether to call through to native.register_toolchains.
            Should be True for WORKSPACE users,
            but False when used under bzlmod extension.
        **kwargs: passed to each zig_repository call
    """
    versions_unset = zig_versions == None
    version_unset = zig_version == None
    both_unset = versions_unset and version_unset
    both_set = not versions_unset and not version_unset
    if both_unset or both_set:
        fail("You must specify one of `zig_versions` or `zig_version`")

    if versions_unset:
        zig_versions = [zig_version]

    for zig_version in zig_versions:
        sanitized_zig_version = sanitize_version(zig_version)
        for platform in PLATFORMS.keys():
            zig_repository(
                name = name + "_" + sanitized_zig_version + "_" + platform,
                zig_version = zig_version,
                platform = platform,
                **kwargs
            )

    toolchains_repo(
        name = name + "_toolchains",
        user_repository_name = name,
        zig_versions = zig_versions,
    )

    if register:
        native.register_toolchains("@%s_toolchains//:all" % name)
        native.register_toolchains("@rules_zig//zig/target:all")
